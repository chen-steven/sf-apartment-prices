{"version":3,"sources":["PricePlot.js","App.js","reportWebVitals.js","index.js"],"names":["Option","Select","PricePlot","useState","apartmentData","setApartmentData","key","setKey","useEffect","axios","get","then","res","apartments","strata","date","min_price","max_price","mean_price","windsor","azure","data","sort","a","b","localeCompare","forEach","entry","name","push","console","log","x","y","mode","threeFortyFremont","defaultValue","onChange","val","value","App","style","display","flexDirection","alignItems","justifyContent","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAKQA,EAAWC,IAAXD,OACD,SAASE,IACZ,MAA0CC,qBAA1C,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAsBF,mBAAS,aAA/B,mBAAOG,EAAP,KAAYC,EAAZ,KACAC,qBAAU,WACNC,IAAMC,IAAI,mFACTC,MAAK,SAACC,GACH,IAAMC,EAAa,CACfC,OAAQ,CAACC,KAAM,GAAIC,UAAW,GAAIC,UAAW,GAAIC,WAAY,IAC7DC,QAAS,CAACJ,KAAM,GAAIC,UAAW,GAAIC,UAAW,GAAIC,WAAY,IAC9D,cAAe,CAACH,KAAM,GAAIC,UAAW,GAAIC,UAAW,GAAIC,WAAY,IACpEE,MAAO,CAACL,KAAM,GAAIC,UAAW,GAAIC,UAAW,GAAIC,WAAY,KAGhEN,EAAIS,KAAKC,MAAK,SAACC,EAAEC,GAAH,OAASD,EAAER,KAAKU,cAAcD,EAAET,SAC9CH,EAAIS,KAAKK,SAAQ,SAACC,GACdd,EAAWc,EAAMC,MAAMb,KAAKc,KAAKF,EAAMZ,MACvCF,EAAWc,EAAMC,MAAMZ,UAAUa,KAAKF,EAAMX,WAC5CH,EAAWc,EAAMC,MAAMX,UAAUY,KAAKF,EAAMV,WAC5CJ,EAAWc,EAAMC,MAAMV,WAAWW,KAAKF,EAAMT,eAEjDY,QAAQC,IAAIlB,GACZR,EAAiBQ,QAEtB,IAMH,IAAKT,EACD,OAAO,4CAGX,IAAMe,EAAU,CACZa,EAAG5B,EAAce,QAAQJ,KACzBkB,EAAG7B,EAAce,QAAQb,GACzB4B,KAAM,QACNN,KAAM,WAEJR,EAAQ,CACVY,EAAG5B,EAAcgB,MAAML,KACvBkB,EAAG7B,EAAcgB,MAAMd,GACvB4B,KAAM,QACNN,KAAM,SAEJd,EAAS,CACXkB,EAAG5B,EAAcU,OAAOC,KACxBkB,EAAG7B,EAAcU,OAAOR,GACxB4B,KAAM,QACNN,KAAM,UAEJO,EAAoB,CACtBH,EAAG5B,EAAc,eAAeW,KAChCkB,EAAG7B,EAAc,eAAeE,GAChC4B,KAAM,QACNN,KAAM,eAGV,OAAQ,qCACJ,eAAC,IAAD,CAAQQ,aAAa,YAAYC,SAlCpB,SAACC,GACd/B,EAAO+B,IAiCP,UACA,cAACtC,EAAD,CAAQuC,MAAM,YAAd,uBACA,cAACvC,EAAD,CAAQuC,MAAM,YAAd,uBACA,cAACvC,EAAD,CAAQuC,MAAM,aAAd,2BAIA,cAAC,IAAD,CAAMlB,KAAM,CAACF,EAASC,EAAON,EAAQqB,Q,OCrD9BK,MAhBf,WACE,OAEE,sBAAKC,MAAO,CACVC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,UAJlB,UAME,+DACA,cAAC3C,EAAD,QCDS4C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBrC,MAAK,YAAkD,IAA/CsC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7157e8ae.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport axios from 'axios';\nimport Plot from 'react-plotly.js';\nimport {Select} from \"antd\";\n\nconst { Option } = Select;\nexport function PricePlot() {\n    const [apartmentData, setApartmentData] = useState()\n    const [key, setKey] = useState(\"min_price\")\n    useEffect(() => {\n        axios.get(\"https://36ej55h6pc.execute-api.us-east-1.amazonaws.com/Prod/get-apartment-data/\")\n        .then((res) => {\n            const apartments = {\n                strata: {date: [], min_price: [], max_price: [], mean_price: []},\n                windsor: {date: [], min_price: [], max_price: [], mean_price: []}, \n                \"340-fremont\": {date: [], min_price: [], max_price: [], mean_price: []},\n                azure: {date: [], min_price: [], max_price: [], mean_price: []}\n\n            }\n            res.data.sort((a,b) => a.date.localeCompare(b.date))\n            res.data.forEach((entry) => {\n                apartments[entry.name].date.push(entry.date)\n                apartments[entry.name].min_price.push(entry.min_price)\n                apartments[entry.name].max_price.push(entry.max_price)\n                apartments[entry.name].mean_price.push(entry.mean_price)\n            })\n            console.log(apartments)\n            setApartmentData(apartments)\n        })\n    }, [])\n    \n    const onChange = (val) => {\n        setKey(val);\n    }\n\n    if (!apartmentData) {\n        return <h1>Loading...</h1>\n    }\n\n    const windsor = {\n        x: apartmentData.windsor.date,\n        y: apartmentData.windsor[key],\n        mode: \"lines\",\n        name: \"Windsor\"\n    }\n    const azure = {\n        x: apartmentData.azure.date,\n        y: apartmentData.azure[key],\n        mode: \"lines\",\n        name: \"Azure\"\n    }\n    const strata = {\n        x: apartmentData.strata.date,\n        y: apartmentData.strata[key],\n        mode: \"lines\",\n        name: \"Strata\"\n    }\n    const threeFortyFremont = {\n        x: apartmentData[\"340-fremont\"].date,\n        y: apartmentData[\"340-fremont\"][key],\n        mode: \"lines\",\n        name: \"340 Fremont\"\n    }\n    \n    return (<>\n        <Select defaultValue=\"min_price\" onChange={onChange}> \n        <Option value=\"min_price\">Min Price</Option>\n        <Option value=\"max_price\">Max Price</Option>\n        <Option value=\"mean_price\" >\n            Mean Price\n        </Option>\n        </Select>\n        <Plot data={[windsor, azure, strata, threeFortyFremont]}/>\n        \n        </>)\n}","import { PricePlot } from \"./PricePlot\";\nimport 'antd/dist/antd.css';\n\nfunction App() {\n  return (\n    \n    <div style={{\n      display: 'flex',\n      flexDirection: \"column\",\n      alignItems: 'center',\n      justifyContent: 'center',\n    }}>\n      <h1>SF Apartment Prices (two bed)</h1>\n      <PricePlot/>\n    </div>\n  );\n    \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}