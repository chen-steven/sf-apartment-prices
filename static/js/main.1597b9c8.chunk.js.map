{"version":3,"sources":["PricePlot.js","App.js","reportWebVitals.js","index.js"],"names":["Option","Select","nameMap","PricePlot","useState","apartmentData","setApartmentData","key","setKey","useEffect","axios","get","then","res","apartments","data","sort","a","b","date","localeCompare","forEach","entry","name","min_price","max_price","mean_price","median_price","push","plotData","Object","entries","val","x","y","mode","defaultValue","onChange","value","App","style","display","flexDirection","alignItems","justifyContent","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAKQA,EAAWC,IAAXD,OAEFE,EAAU,CACZ,OAAU,SACV,QAAW,UACX,cAAe,cACf,MAAS,QACT,YAAa,sBAEV,SAASC,IACZ,MAA0CC,qBAA1C,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAsBF,mBAAS,aAA/B,mBAAOG,EAAP,KAAYC,EAAZ,KACAC,qBAAU,WACNC,IAAMC,IAAI,mFACTC,MAAK,SAACC,GACH,IAAMC,EAAa,GACnBD,EAAIE,KAAKC,MAAK,SAACC,EAAEC,GAAH,OAASD,EAAEE,KAAKC,cAAcF,EAAEC,SAC9CN,EAAIE,KAAKM,SAAQ,SAACC,GACTR,EAAWQ,EAAMC,QAClBT,EAAWQ,EAAMC,MAAQ,CAACJ,KAAM,GAAIK,UAAW,GAAIC,UAAW,GAAIC,WAAY,GAAIC,aAAc,KAEpGb,EAAWQ,EAAMC,MAAMJ,KAAKS,KAAKN,EAAMH,MACvCL,EAAWQ,EAAMC,MAAMC,UAAUI,KAAKN,EAAME,WAC5CV,EAAWQ,EAAMC,MAAME,UAAUG,KAAKN,EAAMG,WAC5CX,EAAWQ,EAAMC,MAAMG,WAAWE,KAAKN,EAAMI,YAC7CZ,EAAWQ,EAAMC,MAAMI,aAAaC,KAAKN,EAAMK,iBAEnDrB,EAAiBQ,QAEtB,IAMH,IAAKT,EACD,OAAO,4CAIX,IADA,IAAMwB,EAAW,GACjB,MAA0BC,OAAOC,QAAQ1B,GAAzC,eAAyD,CAApD,0BAAOkB,EAAP,KAAaS,EAAb,KACDH,EAASD,KAAK,CACVK,EAAGD,EAAIb,KACPe,EAAGF,EAAIzB,GACP4B,KAAM,QACNZ,KAAOrB,EAAQqB,GAAQrB,EAAQqB,GAAQA,IAI/C,OAAQ,qCACJ,eAAC,IAAD,CAAQa,aAAa,YAAYC,SAnBpB,SAACL,GACdxB,EAAOwB,IAkBP,UACA,cAAChC,EAAD,CAAQsC,MAAM,YAAd,uBACA,cAACtC,EAAD,CAAQsC,MAAM,YAAd,uBACA,cAACtC,EAAD,CAAQsC,MAAM,aAAd,wBAGA,cAACtC,EAAD,CAAQsC,MAAM,eAAd,6BAIA,cAAC,IAAD,CAAMvB,KAAMc,O,OC9CLU,MAhBf,WACE,OAEE,sBAAKC,MAAO,CACVC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,UAJlB,UAME,+DACA,cAACzC,EAAD,QCDS0C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBnC,MAAK,YAAkD,IAA/CoC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1597b9c8.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport axios from 'axios';\nimport Plot from 'react-plotly.js';\nimport {Select} from \"antd\";\n\nconst { Option } = Select;\n\nconst nameMap = {\n    \"strata\": \"Strata\",\n    \"windsor\": \"Windsor\",\n    \"340-fremont\": \"340 Fremont\",\n    \"azure\": \"Azure\",\n    \"avalon-mb\": \"Avalon Mission Bay\"\n}\nexport function PricePlot() {\n    const [apartmentData, setApartmentData] = useState()\n    const [key, setKey] = useState(\"min_price\")\n    useEffect(() => {\n        axios.get(\"https://36ej55h6pc.execute-api.us-east-1.amazonaws.com/Prod/get-apartment-data/\")\n        .then((res) => {\n            const apartments = {}\n            res.data.sort((a,b) => a.date.localeCompare(b.date))\n            res.data.forEach((entry) => {\n                if (!apartments[entry.name]) {\n                    apartments[entry.name] = {date: [], min_price: [], max_price: [], mean_price: [], median_price: []}\n                }\n                apartments[entry.name].date.push(entry.date)\n                apartments[entry.name].min_price.push(entry.min_price)\n                apartments[entry.name].max_price.push(entry.max_price)\n                apartments[entry.name].mean_price.push(entry.mean_price)\n                apartments[entry.name].median_price.push(entry.median_price)\n            })\n            setApartmentData(apartments)\n        })\n    }, [])\n    \n    const onChange = (val) => {\n        setKey(val);\n    }\n\n    if (!apartmentData) {\n        return <h1>Loading...</h1>\n    }\n\n    const plotData = []\n    for (const [name, val] of Object.entries(apartmentData)) {\n        plotData.push({\n            x: val.date,\n            y: val[key],\n            mode: \"lines\",\n            name: (nameMap[name] ? nameMap[name] : name)\n        })\n      }\n    \n    return (<>\n        <Select defaultValue=\"min_price\" onChange={onChange}> \n        <Option value=\"min_price\">Min Price</Option>\n        <Option value=\"max_price\">Max Price</Option>\n        <Option value=\"mean_price\" >\n            Mean Price\n        </Option>\n        <Option value=\"median_price\" >\n            Median Price\n        </Option>\n        </Select>\n        <Plot data={plotData}/>\n        \n        </>)\n}","import { PricePlot } from \"./PricePlot\";\nimport 'antd/dist/antd.css';\n\nfunction App() {\n  return (\n    \n    <div style={{\n      display: 'flex',\n      flexDirection: \"column\",\n      alignItems: 'center',\n      justifyContent: 'center',\n    }}>\n      <h1>SF Apartment Prices (two bed)</h1>\n      <PricePlot/>\n    </div>\n  );\n    \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}